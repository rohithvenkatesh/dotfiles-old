{
  "manifest": {
    "name": "xpath",
    "version": "0.0.23",
    "description": "DOM 3 Xpath implemention and helper for node.js.",
    "engines": {
      "node": ">=0.6.0"
    },
    "author": {
      "name": "Cameron McCormac"
    },
    "contributors": [
      {
        "name": "goto100"
      },
      {
        "name": "James Rishe"
      }
    ],
    "dependencies": {},
    "devDependencies": {
      "nodeunit": ">=0.6.4",
      "xmldom": "^0.1.19"
    },
    "scripts": {
      "test": "./node_modules/.bin/nodeunit test.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/goto100/xpath.git"
    },
    "main": "./xpath.js",
    "keywords": [
      "xpath",
      "xml"
    ],
    "license": "Creative Commons",
    "_registry": "npm",
    "_loc": "/Users/rohithvenkatesh/.hyper_plugins/cache/v1/npm-xpath-0.0.23-f5e8fdc6bdc7e72885b3234f40cba2669580aafa/package.json",
    "readmeFilename": "README.md",
    "readme": "## xpath\nDOM 3 XPath 1.0 implemention and helper for JavaScript, with node.js support.\n\nOriginally written by Cameron McCormack ([blog](http://mcc.id.au/xpathjs)).\n\nAdditional contributions from  \nYaron Naveh ([blog](http://webservices20.blogspot.com/))  \ngoto100  \nThomas Weinert  \nJimmy Rishe  \nand [others](https://github.com/goto100/xpath/graphs/contributors)\n\n## Install\nInstall with [npm](http://github.com/isaacs/npm):\n\n    npm install xpath\n\nxpath is xml engine agnostic but I recommend to use [xmldom](https://github.com/jindw/xmldom):\n\n    npm install xmldom\n\n\n## Your first xpath:\n`````javascript\nvar xpath = require('xpath')\n  , dom = require('xmldom').DOMParser\n\nvar xml = \"<book><title>Harry Potter</title></book>\"\nvar doc = new dom().parseFromString(xml)\nvar nodes = xpath.select(\"//title\", doc)\n\nconsole.log(nodes[0].localName + \": \" + nodes[0].firstChild.data)\nconsole.log(\"node: \" + nodes[0].toString())\n`````\n➡\n\n    title: Harry Potter\n    Node: <title>Harry Potter</title>\n\n## Get text values directly\n`````javascript\nvar xml = \"<book><title>Harry Potter</title></book>\"\nvar doc = new dom().parseFromString(xml)\nvar title = xpath.select(\"//title/text()\", doc).toString()\n\nconsole.log(title)\n`````\n➡\n\n    Harry Potter\n\n## Namespaces\n`````javascript\nvar xml = \"<book><title xmlns='myns'>Harry Potter</title></book>\"\nvar doc = new dom().parseFromString(xml)\nvar node = xpath.select(\"//*[local-name(.)='title' and namespace-uri(.)='myns']\", doc)[0]\n\nconsole.log(node.namespaceURI)\n`````\n➡\n\n    myns\n\n## Namespaces with easy mappings\n`````javascript\nvar xml = \"<book xmlns:bookml='http://example.com/book'><bookml:title>Harry Potter</bookml:title></book>\"\nvar select = xpath.useNamespaces({\"bookml\": \"http://example.com/book\"});\n\nconsole.log(select('//bookml:title/text()', doc)[0].nodeValue);\n`````\n➡\n\n    Harry Potter\n\n## Default namespace with mapping\n`````javascript\nvar xml = \"<book xmlns='http://example.com/book'><title>Harry Potter</title></book>\"\nvar select = xpath.useNamespaces({\"bookml\": \"http://example.com/book\"});\n\nconsole.log(select('//bookml:title/text()', doc)[0].nodeValue);\n`````\n➡\n\n    Harry Potter\n\n## Attributes\n`````javascript\nvar xml = \"<book author='J. K. Rowling'><title>Harry Potter</title></book>\"\nvar doc = new dom().parseFromString(xml)\nvar author = xpath.select1(\"/book/@author\", doc).value\n\nconsole.log(author)\n`````\n➡\n\n    J. K. Rowling\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/xpath/-/xpath-0.0.23.tgz#f5e8fdc6bdc7e72885b3234f40cba2669580aafa",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/xpath/-/xpath-0.0.23.tgz",
    "hash": "f5e8fdc6bdc7e72885b3234f40cba2669580aafa",
    "registry": "npm",
    "packageName": "xpath"
  },
  "registry": "npm",
  "hash": "f5e8fdc6bdc7e72885b3234f40cba2669580aafa"
}